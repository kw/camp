from __future__ import annotations

import markdown as md
import nh3
from django import template
from django.template.defaultfilters import stringfilter
from django.utils.safestring import mark_safe

register = template.Library()

_MD = md.Markdown(
    output="html",
    extensions=["tables", "smarty", "attr_list", "admonition"],
)


_ATTRIBUTES = {
    "a": {"target", "href", "name"},
}


@register.filter()
@mark_safe
@stringfilter
def markdown(value, arg=None):
    if arg:
        attr_values = {
            "p": {"class": arg},
        }
    else:
        attr_values = None
    return nh3.clean(
        _MD.convert(value), set_tag_attribute_values=attr_values, attributes=_ATTRIBUTES
    )


@register.filter(name="feature_markdown")
@mark_safe
@stringfilter
def feature_markdown(value: str, base: str | None = None):
    """Render markdown intended for feature explanations.

    If a base is provided, rewrite any hrefs that start with "../" to be
    rooted at the provided base. This makes links generated by the rules
    engine work in both classic and reactive views.
    """
    # Render and sanitize like the standard markdown filter
    html = nh3.clean(_MD.convert(value), attributes=_ATTRIBUTES)
    if not base:
        return html
    # Ensure base ends with a slash
    if not base.endswith("/"):
        base = base + "/"
    # Rewrite relative links pointing to parent path
    # This is a simple and safe textual replacement post-sanitization
    return html.replace('href="../', f'href="{base}')
